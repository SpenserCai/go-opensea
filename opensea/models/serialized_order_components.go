// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SerializedOrderComponents SerializedOrderComponents
//
// swagger:model SerializedOrderComponents
type SerializedOrderComponents struct {

	// Conduitkey
	//
	// Indicates what conduit, if any, should be utilized as a source for token approvals when performing transfers. By default (i.e. when conduitKey is set to the zero hash), the offerer will grant transfer approvals to Seaport directly.
	// To utilize OpenSea's conduit, use 0x0000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f0000
	// Required: true
	ConduitKey *string `json:"conduitKey"`

	// Consideration
	// Required: true
	Consideration []*SerializedConsiderationItem `json:"consideration"`

	// Counter
	// Required: true
	Counter interface{} `json:"counter"`

	// Endtime
	//
	// The block timestamp at which the order expires
	// Required: true
	EndTime *string `json:"endTime"`

	// Offer
	// Required: true
	Offer []*SerializedOfferItem `json:"offer"`

	// Offerer
	//
	// The address which supplies all the items in the offer.
	// Required: true
	Offerer *string `json:"offerer"`

	// order type
	// Required: true
	OrderType *CoreBlockchainEvmAbiModelsSeaportOrderType `json:"orderType"`

	// Salt
	//
	// an arbitrary source of entropy for the order
	// Required: true
	Salt *string `json:"salt"`

	// Starttime
	//
	// The block timestamp at which the order becomes active
	// Required: true
	StartTime *string `json:"startTime"`

	// Totaloriginalconsiderationitems
	//
	// Size of the consideration array.
	TotalOriginalConsiderationItems int64 `json:"totalOriginalConsiderationItems,omitempty"`

	// Zone
	//
	// Optional secondary account attached the order which can cancel orders. Additionally, when the `OrderType` is Restricted, the zone or the offerer are the only entities which can execute the order.
	// For open orders, use the zero address.
	// For restricted orders, use the signed zone address <SIGNED_ZONE_ADDRESS>
	// Required: true
	Zone *string `json:"zone"`

	// Zonehash
	//
	// A value that will be supplied to the zone when fulfilling restricted orders that the zone can utilize when making a determination on whether to authorize the order. Most often this value will be the zero hash 0x0000000000000000000000000000000000000000000000000000000000000000
	// Required: true
	ZoneHash *string `json:"zoneHash"`
}

// Validate validates this serialized order components
func (m *SerializedOrderComponents) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConduitKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConsideration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCounter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOffer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOfferer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSalt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateZone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateZoneHash(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SerializedOrderComponents) validateConduitKey(formats strfmt.Registry) error {

	if err := validate.Required("conduitKey", "body", m.ConduitKey); err != nil {
		return err
	}

	return nil
}

func (m *SerializedOrderComponents) validateConsideration(formats strfmt.Registry) error {

	if err := validate.Required("consideration", "body", m.Consideration); err != nil {
		return err
	}

	for i := 0; i < len(m.Consideration); i++ {
		if swag.IsZero(m.Consideration[i]) { // not required
			continue
		}

		if m.Consideration[i] != nil {
			if err := m.Consideration[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("consideration" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("consideration" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SerializedOrderComponents) validateCounter(formats strfmt.Registry) error {

	if m.Counter == nil {
		return errors.Required("counter", "body", nil)
	}

	return nil
}

func (m *SerializedOrderComponents) validateEndTime(formats strfmt.Registry) error {

	if err := validate.Required("endTime", "body", m.EndTime); err != nil {
		return err
	}

	return nil
}

func (m *SerializedOrderComponents) validateOffer(formats strfmt.Registry) error {

	if err := validate.Required("offer", "body", m.Offer); err != nil {
		return err
	}

	for i := 0; i < len(m.Offer); i++ {
		if swag.IsZero(m.Offer[i]) { // not required
			continue
		}

		if m.Offer[i] != nil {
			if err := m.Offer[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("offer" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("offer" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SerializedOrderComponents) validateOfferer(formats strfmt.Registry) error {

	if err := validate.Required("offerer", "body", m.Offerer); err != nil {
		return err
	}

	return nil
}

func (m *SerializedOrderComponents) validateOrderType(formats strfmt.Registry) error {

	if err := validate.Required("orderType", "body", m.OrderType); err != nil {
		return err
	}

	if err := validate.Required("orderType", "body", m.OrderType); err != nil {
		return err
	}

	if m.OrderType != nil {
		if err := m.OrderType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("orderType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("orderType")
			}
			return err
		}
	}

	return nil
}

func (m *SerializedOrderComponents) validateSalt(formats strfmt.Registry) error {

	if err := validate.Required("salt", "body", m.Salt); err != nil {
		return err
	}

	return nil
}

func (m *SerializedOrderComponents) validateStartTime(formats strfmt.Registry) error {

	if err := validate.Required("startTime", "body", m.StartTime); err != nil {
		return err
	}

	return nil
}

func (m *SerializedOrderComponents) validateZone(formats strfmt.Registry) error {

	if err := validate.Required("zone", "body", m.Zone); err != nil {
		return err
	}

	return nil
}

func (m *SerializedOrderComponents) validateZoneHash(formats strfmt.Registry) error {

	if err := validate.Required("zoneHash", "body", m.ZoneHash); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this serialized order components based on the context it is used
func (m *SerializedOrderComponents) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConsideration(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOffer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOrderType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SerializedOrderComponents) contextValidateConsideration(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Consideration); i++ {

		if m.Consideration[i] != nil {
			if err := m.Consideration[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("consideration" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("consideration" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SerializedOrderComponents) contextValidateOffer(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Offer); i++ {

		if m.Offer[i] != nil {
			if err := m.Offer[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("offer" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("offer" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SerializedOrderComponents) contextValidateOrderType(ctx context.Context, formats strfmt.Registry) error {

	if m.OrderType != nil {
		if err := m.OrderType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("orderType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("orderType")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SerializedOrderComponents) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SerializedOrderComponents) UnmarshalBinary(b []byte) error {
	var res SerializedOrderComponents
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
