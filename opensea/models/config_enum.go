// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ConfigEnum * `affiliate` - affiliate
// * `affiliate_partner` - affiliate_partner
// * `affiliate_requested` - affiliate_requested
// * `affiliate_blacklisted` - affiliate_blacklisted
// * `verified` - verified
// * `moderator` - moderator
// * `staff` - staff
// * `employee` - employee
//
// swagger:model ConfigEnum
type ConfigEnum string

func NewConfigEnum(value ConfigEnum) *ConfigEnum {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ConfigEnum.
func (m ConfigEnum) Pointer() *ConfigEnum {
	return &m
}

const (

	// ConfigEnumAffiliate captures enum value "affiliate"
	ConfigEnumAffiliate ConfigEnum = "affiliate"

	// ConfigEnumAffiliatePartner captures enum value "affiliate_partner"
	ConfigEnumAffiliatePartner ConfigEnum = "affiliate_partner"

	// ConfigEnumAffiliateRequested captures enum value "affiliate_requested"
	ConfigEnumAffiliateRequested ConfigEnum = "affiliate_requested"

	// ConfigEnumAffiliateBlacklisted captures enum value "affiliate_blacklisted"
	ConfigEnumAffiliateBlacklisted ConfigEnum = "affiliate_blacklisted"

	// ConfigEnumVerified captures enum value "verified"
	ConfigEnumVerified ConfigEnum = "verified"

	// ConfigEnumModerator captures enum value "moderator"
	ConfigEnumModerator ConfigEnum = "moderator"

	// ConfigEnumStaff captures enum value "staff"
	ConfigEnumStaff ConfigEnum = "staff"

	// ConfigEnumEmployee captures enum value "employee"
	ConfigEnumEmployee ConfigEnum = "employee"
)

// for schema
var configEnumEnum []interface{}

func init() {
	var res []ConfigEnum
	if err := json.Unmarshal([]byte(`["affiliate","affiliate_partner","affiliate_requested","affiliate_blacklisted","verified","moderator","staff","employee"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		configEnumEnum = append(configEnumEnum, v)
	}
}

func (m ConfigEnum) validateConfigEnumEnum(path, location string, value ConfigEnum) error {
	if err := validate.EnumCase(path, location, value, configEnumEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this config enum
func (m ConfigEnum) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateConfigEnumEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this config enum based on context it is used
func (m ConfigEnum) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
