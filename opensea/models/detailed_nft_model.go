// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DetailedNftModel DetailedNftModel
//
// swagger:model DetailedNftModel
type DetailedNftModel struct {

	// Animation Url
	//
	// Link to the NFT's original animation.
	AnimationURL string `json:"animation_url,omitempty"`

	// Collection
	//
	// Collection slug. A unique string to identify a collection on OpenSea
	// Required: true
	Collection *string `json:"collection"`

	// Contract
	//
	// The unique public blockchain identifier for the contract
	// Required: true
	Contract *string `json:"contract"`

	// Created At
	//
	// Deprecated Field
	CreatedAt *string `json:"created_at,omitempty"`

	// Creator
	//
	// The unique public blockchain identifier, wallet address, for the creator
	// Required: true
	Creator *string `json:"creator"`

	// Description
	//
	// Description of the NFT
	// Required: true
	Description *string `json:"description"`

	// Identifier
	//
	// The NFT's unique identifier within the smart contract (also referred to as token_id)
	// Required: true
	Identifier *string `json:"identifier"`

	// Image Url
	//
	// Link to the NFT's original image. This may be an HTTP url, SVG data, or other directly embedded data.
	ImageURL string `json:"image_url,omitempty"`

	// Is Disabled
	//
	// If the item is currently able to be bought or sold using OpenSea
	// Required: true
	IsDisabled *bool `json:"is_disabled"`

	// Is Nsfw
	//
	// If the item is currently classified as 'Not Safe for Work' by OpenSea
	// Required: true
	IsNsfw *bool `json:"is_nsfw"`

	// Is Suspicious
	//
	// If the item has been reported for suspicious activity by OpenSea
	// Required: true
	IsSuspicious *bool `json:"is_suspicious"`

	// Metadata Url
	//
	// Link to the offchain metadata store
	MetadataURL string `json:"metadata_url,omitempty"`

	// Name
	//
	// Name of the NFT
	// Required: true
	Name *string `json:"name"`

	// Owners
	//
	// List of Owners. The field will be null if the NFT has more than 50 owners
	// Required: true
	Owners []*OwnerModel `json:"owners"`

	// Rarity
	//
	// Rarity data for the NFT
	// Required: true
	Rarity struct {
		RarityDataModel
	} `json:"rarity"`

	// Token Standard
	//
	// ERC standard of the token (erc721, erc1155)
	// Required: true
	TokenStandard *string `json:"token_standard"`

	// Traits
	//
	// List of Trait objects. The field will be null if the NFT has more than 50 traits
	// Required: true
	Traits []*TraitModel `json:"traits"`

	// Updated At
	//
	// Last time that the NFT's metadata was updated by OpenSea
	// Required: true
	UpdatedAt *string `json:"updated_at"`
}

// Validate validates this detailed nft model
func (m *DetailedNftModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCollection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContract(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdentifier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsDisabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsNsfw(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsSuspicious(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwners(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRarity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTokenStandard(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTraits(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DetailedNftModel) validateCollection(formats strfmt.Registry) error {

	if err := validate.Required("collection", "body", m.Collection); err != nil {
		return err
	}

	return nil
}

func (m *DetailedNftModel) validateContract(formats strfmt.Registry) error {

	if err := validate.Required("contract", "body", m.Contract); err != nil {
		return err
	}

	return nil
}

func (m *DetailedNftModel) validateCreator(formats strfmt.Registry) error {

	if err := validate.Required("creator", "body", m.Creator); err != nil {
		return err
	}

	return nil
}

func (m *DetailedNftModel) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *DetailedNftModel) validateIdentifier(formats strfmt.Registry) error {

	if err := validate.Required("identifier", "body", m.Identifier); err != nil {
		return err
	}

	return nil
}

func (m *DetailedNftModel) validateIsDisabled(formats strfmt.Registry) error {

	if err := validate.Required("is_disabled", "body", m.IsDisabled); err != nil {
		return err
	}

	return nil
}

func (m *DetailedNftModel) validateIsNsfw(formats strfmt.Registry) error {

	if err := validate.Required("is_nsfw", "body", m.IsNsfw); err != nil {
		return err
	}

	return nil
}

func (m *DetailedNftModel) validateIsSuspicious(formats strfmt.Registry) error {

	if err := validate.Required("is_suspicious", "body", m.IsSuspicious); err != nil {
		return err
	}

	return nil
}

func (m *DetailedNftModel) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *DetailedNftModel) validateOwners(formats strfmt.Registry) error {

	if err := validate.Required("owners", "body", m.Owners); err != nil {
		return err
	}

	for i := 0; i < len(m.Owners); i++ {
		if swag.IsZero(m.Owners[i]) { // not required
			continue
		}

		if m.Owners[i] != nil {
			if err := m.Owners[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("owners" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("owners" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DetailedNftModel) validateRarity(formats strfmt.Registry) error {

	return nil
}

func (m *DetailedNftModel) validateTokenStandard(formats strfmt.Registry) error {

	if err := validate.Required("token_standard", "body", m.TokenStandard); err != nil {
		return err
	}

	return nil
}

func (m *DetailedNftModel) validateTraits(formats strfmt.Registry) error {

	if err := validate.Required("traits", "body", m.Traits); err != nil {
		return err
	}

	for i := 0; i < len(m.Traits); i++ {
		if swag.IsZero(m.Traits[i]) { // not required
			continue
		}

		if m.Traits[i] != nil {
			if err := m.Traits[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("traits" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("traits" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DetailedNftModel) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updated_at", "body", m.UpdatedAt); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this detailed nft model based on the context it is used
func (m *DetailedNftModel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOwners(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRarity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTraits(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DetailedNftModel) contextValidateOwners(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Owners); i++ {

		if m.Owners[i] != nil {
			if err := m.Owners[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("owners" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("owners" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DetailedNftModel) contextValidateRarity(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *DetailedNftModel) contextValidateTraits(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Traits); i++ {

		if m.Traits[i] != nil {
			if err := m.Traits[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("traits" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("traits" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DetailedNftModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DetailedNftModel) UnmarshalBinary(b []byte) error {
	var res DetailedNftModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
