// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// OrderEventModelEventTypeEnum order event model event type enum
//
// swagger:model OrderEventModelEventTypeEnum
type OrderEventModelEventTypeEnum string

func NewOrderEventModelEventTypeEnum(value OrderEventModelEventTypeEnum) *OrderEventModelEventTypeEnum {
	return &value
}

// Pointer returns a pointer to a freshly-allocated OrderEventModelEventTypeEnum.
func (m OrderEventModelEventTypeEnum) Pointer() *OrderEventModelEventTypeEnum {
	return &m
}

const (

	// OrderEventModelEventTypeEnumOrder captures enum value "order"
	OrderEventModelEventTypeEnumOrder OrderEventModelEventTypeEnum = "order"
)

// for schema
var orderEventModelEventTypeEnumEnum []interface{}

func init() {
	var res []OrderEventModelEventTypeEnum
	if err := json.Unmarshal([]byte(`["order"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		orderEventModelEventTypeEnumEnum = append(orderEventModelEventTypeEnumEnum, v)
	}
}

func (m OrderEventModelEventTypeEnum) validateOrderEventModelEventTypeEnumEnum(path, location string, value OrderEventModelEventTypeEnum) error {
	if err := validate.EnumCase(path, location, value, orderEventModelEventTypeEnumEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this order event model event type enum
func (m OrderEventModelEventTypeEnum) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateOrderEventModelEventTypeEnumEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this order event model event type enum based on context it is used
func (m OrderEventModelEventTypeEnum) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
