// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// CollectionStatsInterval CollectionStatsInterval
//
// # The interval for which the stats are calculated
//
// swagger:model CollectionStatsInterval
type CollectionStatsInterval string

func NewCollectionStatsInterval(value CollectionStatsInterval) *CollectionStatsInterval {
	return &value
}

// Pointer returns a pointer to a freshly-allocated CollectionStatsInterval.
func (m CollectionStatsInterval) Pointer() *CollectionStatsInterval {
	return &m
}

const (

	// CollectionStatsIntervalOneDay captures enum value "one_day"
	CollectionStatsIntervalOneDay CollectionStatsInterval = "one_day"

	// CollectionStatsIntervalOneWeek captures enum value "one_week"
	CollectionStatsIntervalOneWeek CollectionStatsInterval = "one_week"

	// CollectionStatsIntervalOneMonth captures enum value "one_month"
	CollectionStatsIntervalOneMonth CollectionStatsInterval = "one_month"
)

// for schema
var collectionStatsIntervalEnum []interface{}

func init() {
	var res []CollectionStatsInterval
	if err := json.Unmarshal([]byte(`["one_day","one_week","one_month"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		collectionStatsIntervalEnum = append(collectionStatsIntervalEnum, v)
	}
}

func (m CollectionStatsInterval) validateCollectionStatsIntervalEnum(path, location string, value CollectionStatsInterval) error {
	if err := validate.EnumCase(path, location, value, collectionStatsIntervalEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this collection stats interval
func (m CollectionStatsInterval) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateCollectionStatsIntervalEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this collection stats interval based on context it is used
func (m CollectionStatsInterval) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
