// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DetailedAccountDataModel DetailedAccountDataModel
//
// swagger:model DetailedAccountDataModel
type DetailedAccountDataModel struct {

	// Address
	//
	// The unique public blockchain identifier for the wallet.
	Address string `json:"address,omitempty"`

	// Banner Image Url
	//
	// The OpenSea account's banner url.
	BannerImageURL string `json:"banner_image_url,omitempty"`

	// Bio
	//
	// The OpenSea account's bio.
	Bio string `json:"bio,omitempty"`

	// Joined Date
	//
	// Date the account was first added to OpenSea.
	// Format: date
	JoinedDate strfmt.Date `json:"joined_date,omitempty"`

	// Profile Image Url
	//
	// The OpenSea account's image url.
	ProfileImageURL string `json:"profile_image_url,omitempty"`

	// Social Media Account
	SocialMediaAccounts []*SocialMediaAccountModel `json:"social_media_accounts"`

	// Username
	//
	// The OpenSea account's username.
	Username string `json:"username,omitempty"`

	// Website
	//
	// Personal website for the OpenSea user.
	Website string `json:"website,omitempty"`
}

// Validate validates this detailed account data model
func (m *DetailedAccountDataModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateJoinedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSocialMediaAccounts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DetailedAccountDataModel) validateJoinedDate(formats strfmt.Registry) error {
	if swag.IsZero(m.JoinedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("joined_date", "body", "date", m.JoinedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DetailedAccountDataModel) validateSocialMediaAccounts(formats strfmt.Registry) error {
	if swag.IsZero(m.SocialMediaAccounts) { // not required
		return nil
	}

	for i := 0; i < len(m.SocialMediaAccounts); i++ {
		if swag.IsZero(m.SocialMediaAccounts[i]) { // not required
			continue
		}

		if m.SocialMediaAccounts[i] != nil {
			if err := m.SocialMediaAccounts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("social_media_accounts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("social_media_accounts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this detailed account data model based on the context it is used
func (m *DetailedAccountDataModel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSocialMediaAccounts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DetailedAccountDataModel) contextValidateSocialMediaAccounts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SocialMediaAccounts); i++ {

		if m.SocialMediaAccounts[i] != nil {
			if err := m.SocialMediaAccounts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("social_media_accounts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("social_media_accounts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DetailedAccountDataModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DetailedAccountDataModel) UnmarshalBinary(b []byte) error {
	var res DetailedAccountDataModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
