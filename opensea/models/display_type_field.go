// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// DisplayTypeField DisplayTypeField
//
// A field indicating how to display. None is used for string traits.
//
// swagger:model DisplayTypeField
type DisplayTypeField string

func NewDisplayTypeField(value DisplayTypeField) *DisplayTypeField {
	return &value
}

// Pointer returns a pointer to a freshly-allocated DisplayTypeField.
func (m DisplayTypeField) Pointer() *DisplayTypeField {
	return &m
}

const (

	// DisplayTypeFieldNumber captures enum value "number"
	DisplayTypeFieldNumber DisplayTypeField = "number"

	// DisplayTypeFieldBoostPercentage captures enum value "boost_percentage"
	DisplayTypeFieldBoostPercentage DisplayTypeField = "boost_percentage"

	// DisplayTypeFieldBoostNumber captures enum value "boost_number"
	DisplayTypeFieldBoostNumber DisplayTypeField = "boost_number"

	// DisplayTypeFieldAuthor captures enum value "author"
	DisplayTypeFieldAuthor DisplayTypeField = "author"

	// DisplayTypeFieldDate captures enum value "date"
	DisplayTypeFieldDate DisplayTypeField = "date"

	// DisplayTypeFieldNone captures enum value "None"
	DisplayTypeFieldNone DisplayTypeField = "None"
)

// for schema
var displayTypeFieldEnum []interface{}

func init() {
	var res []DisplayTypeField
	if err := json.Unmarshal([]byte(`["number","boost_percentage","boost_number","author","date","None"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		displayTypeFieldEnum = append(displayTypeFieldEnum, v)
	}
}

func (m DisplayTypeField) validateDisplayTypeFieldEnum(path, location string, value DisplayTypeField) error {
	if err := validate.EnumCase(path, location, value, displayTypeFieldEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this display type field
func (m DisplayTypeField) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateDisplayTypeFieldEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this display type field based on context it is used
func (m DisplayTypeField) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
