// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CollectionStatsIntervalModel CollectionStatsIntervalModel
//
// swagger:model CollectionStatsIntervalModel
type CollectionStatsIntervalModel struct {

	// Average Price
	//
	// The average sale price of NFTs in the collection during the interval
	// Required: true
	AveragePrice *float64 `json:"average_price"`

	// interval
	// Required: true
	Interval *CollectionStatsInterval `json:"interval"`

	// Sales
	//
	// The number of sales for the collection during the specified interval
	// Required: true
	Sales *int64 `json:"sales"`

	// Sales Diff
	//
	// The percentage change in number of sales compared to the previous interval
	// Required: true
	SalesDiff *float64 `json:"sales_diff"`

	// Volume
	//
	// The volume of sales for the collection during the specified interval
	// Required: true
	Volume *float64 `json:"volume"`

	// Volume Change
	//
	// The percentage change in volume compared to the previous interval
	// Required: true
	VolumeChange *float64 `json:"volume_change"`

	// Volume Diff
	//
	// The volume differential compared to the previous interval
	// Required: true
	VolumeDiff *float64 `json:"volume_diff"`
}

// Validate validates this collection stats interval model
func (m *CollectionStatsIntervalModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAveragePrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInterval(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSales(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSalesDiff(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVolume(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVolumeChange(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVolumeDiff(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CollectionStatsIntervalModel) validateAveragePrice(formats strfmt.Registry) error {

	if err := validate.Required("average_price", "body", m.AveragePrice); err != nil {
		return err
	}

	return nil
}

func (m *CollectionStatsIntervalModel) validateInterval(formats strfmt.Registry) error {

	if err := validate.Required("interval", "body", m.Interval); err != nil {
		return err
	}

	if err := validate.Required("interval", "body", m.Interval); err != nil {
		return err
	}

	if m.Interval != nil {
		if err := m.Interval.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("interval")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("interval")
			}
			return err
		}
	}

	return nil
}

func (m *CollectionStatsIntervalModel) validateSales(formats strfmt.Registry) error {

	if err := validate.Required("sales", "body", m.Sales); err != nil {
		return err
	}

	return nil
}

func (m *CollectionStatsIntervalModel) validateSalesDiff(formats strfmt.Registry) error {

	if err := validate.Required("sales_diff", "body", m.SalesDiff); err != nil {
		return err
	}

	return nil
}

func (m *CollectionStatsIntervalModel) validateVolume(formats strfmt.Registry) error {

	if err := validate.Required("volume", "body", m.Volume); err != nil {
		return err
	}

	return nil
}

func (m *CollectionStatsIntervalModel) validateVolumeChange(formats strfmt.Registry) error {

	if err := validate.Required("volume_change", "body", m.VolumeChange); err != nil {
		return err
	}

	return nil
}

func (m *CollectionStatsIntervalModel) validateVolumeDiff(formats strfmt.Registry) error {

	if err := validate.Required("volume_diff", "body", m.VolumeDiff); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this collection stats interval model based on the context it is used
func (m *CollectionStatsIntervalModel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInterval(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CollectionStatsIntervalModel) contextValidateInterval(ctx context.Context, formats strfmt.Registry) error {

	if m.Interval != nil {
		if err := m.Interval.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("interval")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("interval")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CollectionStatsIntervalModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CollectionStatsIntervalModel) UnmarshalBinary(b []byte) error {
	var res CollectionStatsIntervalModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
