// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Criteria Criteria
//
// swagger:model Criteria
type Criteria struct {

	// Collection
	//
	// The collection in which the criteria offer is being made for.
	// Required: true
	Collection struct {
		Collection
	} `json:"collection"`

	// Contract
	//
	// The unique public blockchain identifier, address, for the NFT contract
	// Required: true
	Contract struct {
		Contract
	} `json:"contract"`

	// Encoded Token Ids
	//
	// Represents a list of token ids which can be used to fulfill the criteria offer. When decoded using the provided SDK function, developers can now see a list of all tokens that could be used to fulfill the offer.
	EncodedTokenIds string `json:"encoded_token_ids,omitempty"`

	// Trait
	//
	// The trait that the criteria offer is being made for.
	Trait struct {
		Trait
	} `json:"trait,omitempty"`
}

// Validate validates this criteria
func (m *Criteria) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCollection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContract(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrait(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Criteria) validateCollection(formats strfmt.Registry) error {

	return nil
}

func (m *Criteria) validateContract(formats strfmt.Registry) error {

	return nil
}

func (m *Criteria) validateTrait(formats strfmt.Registry) error {
	if swag.IsZero(m.Trait) { // not required
		return nil
	}

	return nil
}

// ContextValidate validate this criteria based on the context it is used
func (m *Criteria) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCollection(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateContract(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTrait(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Criteria) contextValidateCollection(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *Criteria) contextValidateContract(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *Criteria) contextValidateTrait(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *Criteria) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Criteria) UnmarshalBinary(b []byte) error {
	var res Criteria
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
