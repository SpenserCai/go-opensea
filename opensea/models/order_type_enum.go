// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// OrderTypeEnum * `basic` - basic
// * `dutch` - dutch
// * `english` - english
// * `criteria` - criteria
//
// swagger:model OrderTypeEnum
type OrderTypeEnum string

func NewOrderTypeEnum(value OrderTypeEnum) *OrderTypeEnum {
	return &value
}

// Pointer returns a pointer to a freshly-allocated OrderTypeEnum.
func (m OrderTypeEnum) Pointer() *OrderTypeEnum {
	return &m
}

const (

	// OrderTypeEnumBasic captures enum value "basic"
	OrderTypeEnumBasic OrderTypeEnum = "basic"

	// OrderTypeEnumDutch captures enum value "dutch"
	OrderTypeEnumDutch OrderTypeEnum = "dutch"

	// OrderTypeEnumEnglish captures enum value "english"
	OrderTypeEnumEnglish OrderTypeEnum = "english"

	// OrderTypeEnumCriteria captures enum value "criteria"
	OrderTypeEnumCriteria OrderTypeEnum = "criteria"
)

// for schema
var orderTypeEnumEnum []interface{}

func init() {
	var res []OrderTypeEnum
	if err := json.Unmarshal([]byte(`["basic","dutch","english","criteria"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		orderTypeEnumEnum = append(orderTypeEnumEnum, v)
	}
}

func (m OrderTypeEnum) validateOrderTypeEnumEnum(path, location string, value OrderTypeEnum) error {
	if err := validate.EnumCase(path, location, value, orderTypeEnumEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this order type enum
func (m OrderTypeEnum) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateOrderTypeEnumEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this order type enum based on context it is used
func (m OrderTypeEnum) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
