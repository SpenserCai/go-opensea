// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PaginatedListingList Paginated Listing List
//
// swagger:model PaginatedListingList
type PaginatedListingList struct {

	// Listings
	//
	// OpenSea Listings
	// Required: true
	Listings []*Listing `json:"listings"`

	// Next
	//
	// Cursor for the next page of results
	// Required: true
	Next *string `json:"next"`
}

// Validate validates this paginated listing list
func (m *PaginatedListingList) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateListings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNext(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaginatedListingList) validateListings(formats strfmt.Registry) error {

	if err := validate.Required("listings", "body", m.Listings); err != nil {
		return err
	}

	for i := 0; i < len(m.Listings); i++ {
		if swag.IsZero(m.Listings[i]) { // not required
			continue
		}

		if m.Listings[i] != nil {
			if err := m.Listings[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listings" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("listings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PaginatedListingList) validateNext(formats strfmt.Registry) error {

	if err := validate.Required("next", "body", m.Next); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this paginated listing list based on the context it is used
func (m *PaginatedListingList) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateListings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaginatedListingList) contextValidateListings(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Listings); i++ {

		if m.Listings[i] != nil {
			if err := m.Listings[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listings" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("listings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PaginatedListingList) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaginatedListingList) UnmarshalBinary(b []byte) error {
	var res PaginatedListingList
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
