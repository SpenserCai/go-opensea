// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TransferEventModel TransferEventModel
//
// swagger:model TransferEventModel
type TransferEventModel struct {

	// The chain on which the transfer occurred
	// Required: true
	Chain struct {
		ChainIdentifier
	} `json:"chain"`

	// Event Type
	EventType struct {
		TransferEventModelEventTypeEnum
	} `json:"event_type,omitempty"`

	// From Address
	//
	// Address of the sender
	// Required: true
	FromAddress *string `json:"from_address"`

	// Quantity
	//
	// Number of assets transferred
	// Required: true
	Quantity *int64 `json:"quantity"`

	// To Address
	//
	// Address of the recipient
	// Required: true
	ToAddress *string `json:"to_address"`

	// Transaction
	//
	// Transaction hash for the transfer
	// Required: true
	Transaction *string `json:"transaction"`
}

// Validate validates this transfer event model
func (m *TransferEventModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFromAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuantity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateToAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransaction(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TransferEventModel) validateChain(formats strfmt.Registry) error {

	return nil
}

func (m *TransferEventModel) validateEventType(formats strfmt.Registry) error {
	if swag.IsZero(m.EventType) { // not required
		return nil
	}

	return nil
}

func (m *TransferEventModel) validateFromAddress(formats strfmt.Registry) error {

	if err := validate.Required("from_address", "body", m.FromAddress); err != nil {
		return err
	}

	return nil
}

func (m *TransferEventModel) validateQuantity(formats strfmt.Registry) error {

	if err := validate.Required("quantity", "body", m.Quantity); err != nil {
		return err
	}

	return nil
}

func (m *TransferEventModel) validateToAddress(formats strfmt.Registry) error {

	if err := validate.Required("to_address", "body", m.ToAddress); err != nil {
		return err
	}

	return nil
}

func (m *TransferEventModel) validateTransaction(formats strfmt.Registry) error {

	if err := validate.Required("transaction", "body", m.Transaction); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this transfer event model based on the context it is used
func (m *TransferEventModel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEventType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TransferEventModel) contextValidateEventType(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *TransferEventModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TransferEventModel) UnmarshalBinary(b []byte) error {
	var res TransferEventModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
