// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ItemType ItemType
//
// 0 - Native - Ether (or other native token for the given chain)
// 1 - ERC20
// 2 - ERC721
// 3 - ERC1155
// 4 - ERC721 with criteria
// 5 - ERC1155 with criteria
//
// swagger:model ItemType
type ItemType int64

// for schema
var itemTypeEnum []interface{}

func init() {
	var res []ItemType
	if err := json.Unmarshal([]byte(`[0,1,2,3,4,5]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		itemTypeEnum = append(itemTypeEnum, v)
	}
}

func (m ItemType) validateItemTypeEnum(path, location string, value ItemType) error {
	if err := validate.EnumCase(path, location, value, itemTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this item type
func (m ItemType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateItemTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this item type based on context it is used
func (m ItemType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
