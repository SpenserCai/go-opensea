// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PartialParameters PartialParameters
//
// swagger:model PartialParameters
type PartialParameters struct {

	// Consideration
	//
	// One of the consideration items used when creating criteria offers.
	// Required: true
	Consideration []*SerializedConsiderationItem `json:"consideration"`

	// Zone
	//
	// Optional secondary account attached the order which can cancel orders. Additionally, when the `OrderType` is Restricted, the zone or the offerer are the only entities which can execute the order.
	// For open orders, use the zero address.
	// For restricted orders, use the signed zone address 0x000000e7ec00e7b300774b00001314b8610022b8
	// Required: true
	Zone *string `json:"zone"`

	// Zonehash
	//
	// A value that will be supplied to the zone when fulfilling restricted orders that the zone can utilize when making a determination on whether to authorize the order. Most often this value will be the zero hash 0x0000000000000000000000000000000000000000000000000000000000000000
	// Required: true
	ZoneHash *string `json:"zoneHash"`
}

// Validate validates this partial parameters
func (m *PartialParameters) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConsideration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateZone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateZoneHash(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PartialParameters) validateConsideration(formats strfmt.Registry) error {

	if err := validate.Required("consideration", "body", m.Consideration); err != nil {
		return err
	}

	for i := 0; i < len(m.Consideration); i++ {
		if swag.IsZero(m.Consideration[i]) { // not required
			continue
		}

		if m.Consideration[i] != nil {
			if err := m.Consideration[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("consideration" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("consideration" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PartialParameters) validateZone(formats strfmt.Registry) error {

	if err := validate.Required("zone", "body", m.Zone); err != nil {
		return err
	}

	return nil
}

func (m *PartialParameters) validateZoneHash(formats strfmt.Registry) error {

	if err := validate.Required("zoneHash", "body", m.ZoneHash); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this partial parameters based on the context it is used
func (m *PartialParameters) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConsideration(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PartialParameters) contextValidateConsideration(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Consideration); i++ {

		if m.Consideration[i] != nil {
			if err := m.Consideration[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("consideration" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("consideration" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PartialParameters) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PartialParameters) UnmarshalBinary(b []byte) error {
	var res PartialParameters
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
