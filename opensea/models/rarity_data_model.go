// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RarityDataModel RarityDataModel
//
// swagger:model RarityDataModel
type RarityDataModel struct {

	// Calculated At
	//
	// Deprecated Field
	CalculatedAt string `json:"calculated_at,omitempty"`

	// Max Rank
	//
	// Deprecated Field
	MaxRank int64 `json:"max_rank,omitempty"`

	// Rank
	//
	// Rarity Rank of the NFT in the collection
	// Required: true
	Rank *int64 `json:"rank"`

	// Ranking Features
	//
	// Deprecated Field
	RankingFeatures struct {
		RankingFeatures
	} `json:"ranking_features,omitempty"`

	// Score
	//
	// Deprecated Field
	Score float64 `json:"score,omitempty"`

	// Deprecated Field
	StrategyID struct {
		RarityStrategyID
	} `json:"strategy_id,omitempty"`

	// Strategy Version
	//
	// Deprecated Field
	StrategyVersion string `json:"strategy_version,omitempty"`

	// Total Supply
	//
	// Deprecated Field
	TotalSupply int64 `json:"total_supply,omitempty"`
}

// Validate validates this rarity data model
func (m *RarityDataModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRank(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRankingFeatures(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStrategyID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RarityDataModel) validateRank(formats strfmt.Registry) error {

	if err := validate.Required("rank", "body", m.Rank); err != nil {
		return err
	}

	return nil
}

func (m *RarityDataModel) validateRankingFeatures(formats strfmt.Registry) error {
	if swag.IsZero(m.RankingFeatures) { // not required
		return nil
	}

	return nil
}

func (m *RarityDataModel) validateStrategyID(formats strfmt.Registry) error {
	if swag.IsZero(m.StrategyID) { // not required
		return nil
	}

	return nil
}

// ContextValidate validate this rarity data model based on the context it is used
func (m *RarityDataModel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRankingFeatures(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RarityDataModel) contextValidateRankingFeatures(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *RarityDataModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RarityDataModel) UnmarshalBinary(b []byte) error {
	var res RarityDataModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
