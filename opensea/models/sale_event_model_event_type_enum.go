// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// SaleEventModelEventTypeEnum sale event model event type enum
//
// swagger:model SaleEventModelEventTypeEnum
type SaleEventModelEventTypeEnum string

func NewSaleEventModelEventTypeEnum(value SaleEventModelEventTypeEnum) *SaleEventModelEventTypeEnum {
	return &value
}

// Pointer returns a pointer to a freshly-allocated SaleEventModelEventTypeEnum.
func (m SaleEventModelEventTypeEnum) Pointer() *SaleEventModelEventTypeEnum {
	return &m
}

const (

	// SaleEventModelEventTypeEnumSale captures enum value "sale"
	SaleEventModelEventTypeEnumSale SaleEventModelEventTypeEnum = "sale"
)

// for schema
var saleEventModelEventTypeEnumEnum []interface{}

func init() {
	var res []SaleEventModelEventTypeEnum
	if err := json.Unmarshal([]byte(`["sale"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		saleEventModelEventTypeEnumEnum = append(saleEventModelEventTypeEnumEnum, v)
	}
}

func (m SaleEventModelEventTypeEnum) validateSaleEventModelEventTypeEnumEnum(path, location string, value SaleEventModelEventTypeEnum) error {
	if err := validate.EnumCase(path, location, value, saleEventModelEventTypeEnumEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this sale event model event type enum
func (m SaleEventModelEventTypeEnum) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSaleEventModelEventTypeEnumEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this sale event model event type enum based on context it is used
func (m SaleEventModelEventTypeEnum) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
