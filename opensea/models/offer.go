// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Offer Offer
//
// swagger:model Offer
type Offer struct {

	// chain
	// Required: true
	Chain ChainIdentifier `json:"chain"`

	// Criteria
	//
	// Criteria for collection or trait offers
	Criteria struct {
		Criteria
	} `json:"criteria,omitempty"`

	// Order Hash
	//
	// Order hash
	// Required: true
	OrderHash *string `json:"order_hash"`

	// Protocol Address
	//
	// Exchange contract address
	// Required: true
	ProtocolAddress *string `json:"protocol_address"`

	// Protocol Data
	//
	// The onchain order data.
	// Required: true
	ProtocolData struct {
		SerializedOrder
	} `json:"protocol_data"`
}

// Validate validates this offer
func (m *Offer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCriteria(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderHash(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtocolAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtocolData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Offer) validateChain(formats strfmt.Registry) error {

	if m.Chain == nil {
		return errors.Required("chain", "body", nil)
	}

	return nil
}

func (m *Offer) validateCriteria(formats strfmt.Registry) error {
	if swag.IsZero(m.Criteria) { // not required
		return nil
	}

	return nil
}

func (m *Offer) validateOrderHash(formats strfmt.Registry) error {

	if err := validate.Required("order_hash", "body", m.OrderHash); err != nil {
		return err
	}

	return nil
}

func (m *Offer) validateProtocolAddress(formats strfmt.Registry) error {

	if err := validate.Required("protocol_address", "body", m.ProtocolAddress); err != nil {
		return err
	}

	return nil
}

func (m *Offer) validateProtocolData(formats strfmt.Registry) error {

	return nil
}

// ContextValidate validate this offer based on the context it is used
func (m *Offer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCriteria(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProtocolData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Offer) contextValidateCriteria(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *Offer) contextValidateProtocolData(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *Offer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Offer) UnmarshalBinary(b []byte) error {
	var res Offer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
