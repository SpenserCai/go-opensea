// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EventPaymentModel EventPaymentModel
//
// swagger:model EventPaymentModel
type EventPaymentModel struct {

	// Decimals
	//
	// Returns the number of decimals the token uses - e.g. 8, means to divide the token amount by 100000000 to get its user representation.
	// Required: true
	Decimals *int64 `json:"decimals"`

	// Quantity
	//
	// Amount of tokens in the order
	// Required: true
	Quantity *int64 `json:"quantity"`

	// Symbol
	//
	// Returns the symbol of the token, e.g. ETH, WETH, USDC, etc
	// Required: true
	Symbol *string `json:"symbol"`

	// Token Address
	//
	// The contract address for the ERC20 token
	// Required: true
	TokenAddress *string `json:"token_address"`
}

// Validate validates this event payment model
func (m *EventPaymentModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDecimals(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuantity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSymbol(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTokenAddress(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EventPaymentModel) validateDecimals(formats strfmt.Registry) error {

	if err := validate.Required("decimals", "body", m.Decimals); err != nil {
		return err
	}

	return nil
}

func (m *EventPaymentModel) validateQuantity(formats strfmt.Registry) error {

	if err := validate.Required("quantity", "body", m.Quantity); err != nil {
		return err
	}

	return nil
}

func (m *EventPaymentModel) validateSymbol(formats strfmt.Registry) error {

	if err := validate.Required("symbol", "body", m.Symbol); err != nil {
		return err
	}

	return nil
}

func (m *EventPaymentModel) validateTokenAddress(formats strfmt.Registry) error {

	if err := validate.Required("token_address", "body", m.TokenAddress); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this event payment model based on context it is used
func (m *EventPaymentModel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *EventPaymentModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EventPaymentModel) UnmarshalBinary(b []byte) error {
	var res EventPaymentModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
