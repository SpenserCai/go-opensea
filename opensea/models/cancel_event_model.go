// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CancelEventModel CancelEventModel
//
// swagger:model CancelEventModel
type CancelEventModel struct {

	// The chain on which the cancelled order originated
	// Required: true
	Chain struct {
		ChainIdentifier
	} `json:"chain"`

	// Event Type
	EventType struct {
		CancelEventModelEventTypeEnum
	} `json:"event_type,omitempty"`

	// Order Hash
	//
	// Order hash for the order which was cancelled
	// Required: true
	OrderHash *string `json:"order_hash"`
}

// Validate validates this cancel event model
func (m *CancelEventModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderHash(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CancelEventModel) validateChain(formats strfmt.Registry) error {

	return nil
}

func (m *CancelEventModel) validateEventType(formats strfmt.Registry) error {
	if swag.IsZero(m.EventType) { // not required
		return nil
	}

	return nil
}

func (m *CancelEventModel) validateOrderHash(formats strfmt.Registry) error {

	if err := validate.Required("order_hash", "body", m.OrderHash); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this cancel event model based on the context it is used
func (m *CancelEventModel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEventType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CancelEventModel) contextValidateEventType(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *CancelEventModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CancelEventModel) UnmarshalBinary(b []byte) error {
	var res CancelEventModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
