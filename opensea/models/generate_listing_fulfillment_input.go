// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GenerateListingFulfillmentInput GenerateListingFulfillmentInput
//
// swagger:model GenerateListingFulfillmentInput
type GenerateListingFulfillmentInput struct {

	// Fulfiller
	//
	// Fulfiller address.
	// Required: true
	Fulfiller struct {
		FulfillerInput
	} `json:"fulfiller"`

	// Listing
	//
	// Listing to get fullfillment data for.
	// Required: true
	Listing struct {
		FulfillmentInput
	} `json:"listing"`
}

// Validate validates this generate listing fulfillment input
func (m *GenerateListingFulfillmentInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFulfiller(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateListing(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GenerateListingFulfillmentInput) validateFulfiller(formats strfmt.Registry) error {

	return nil
}

func (m *GenerateListingFulfillmentInput) validateListing(formats strfmt.Registry) error {

	return nil
}

// ContextValidate validate this generate listing fulfillment input based on the context it is used
func (m *GenerateListingFulfillmentInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFulfiller(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateListing(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GenerateListingFulfillmentInput) contextValidateFulfiller(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *GenerateListingFulfillmentInput) contextValidateListing(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *GenerateListingFulfillmentInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GenerateListingFulfillmentInput) UnmarshalBinary(b []byte) error {
	var res GenerateListingFulfillmentInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
