// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CollectionFeeModel CollectionFeeModel
//
// swagger:model CollectionFeeModel
type CollectionFeeModel struct {

	// Fee
	//
	// Percentage of the sale price that is paid to the recipient
	// Required: true
	Fee *float64 `json:"fee"`

	// Recipient
	//
	// The unique public blockchain identifier, address, for the recipient
	// Required: true
	Recipient *string `json:"recipient"`

	// Required
	//
	// If the fee is required for the collection
	Required *bool `json:"required,omitempty"`
}

// Validate validates this collection fee model
func (m *CollectionFeeModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFee(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecipient(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CollectionFeeModel) validateFee(formats strfmt.Registry) error {

	if err := validate.Required("fee", "body", m.Fee); err != nil {
		return err
	}

	return nil
}

func (m *CollectionFeeModel) validateRecipient(formats strfmt.Registry) error {

	if err := validate.Required("recipient", "body", m.Recipient); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this collection fee model based on context it is used
func (m *CollectionFeeModel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CollectionFeeModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CollectionFeeModel) UnmarshalBinary(b []byte) error {
	var res CollectionFeeModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
