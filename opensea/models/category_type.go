// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// CategoryType CategoryType
//
// An enumeration.
//
// swagger:model CategoryType
type CategoryType string

func NewCategoryType(value CategoryType) *CategoryType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated CategoryType.
func (m CategoryType) Pointer() *CategoryType {
	return &m
}

const (

	// CategoryTypeString captures enum value "string"
	CategoryTypeString CategoryType = "string"

	// CategoryTypeNumber captures enum value "number"
	CategoryTypeNumber CategoryType = "number"
)

// for schema
var categoryTypeEnum []interface{}

func init() {
	var res []CategoryType
	if err := json.Unmarshal([]byte(`["string","number"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		categoryTypeEnum = append(categoryTypeEnum, v)
	}
}

func (m CategoryType) validateCategoryTypeEnum(path, location string, value CategoryType) error {
	if err := validate.EnumCase(path, location, value, categoryTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this category type
func (m CategoryType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateCategoryTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this category type based on context it is used
func (m CategoryType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
