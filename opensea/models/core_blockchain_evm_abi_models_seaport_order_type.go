// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// CoreBlockchainEvmAbiModelsSeaportOrderType OrderType
//
// The type of order, which determines how it can be executed.
// 0 = Full Open - No partial fills, anyone can execute
// 1 = Partial Open - Partial fills supported, anyone can execute
// 2 = Full Restricted - No partial fills, only offerer or zone can check if it can be executed
// 3 = Partial Restricted - Partial fills supported, only offerer or zone can check if it can be executed
// 4 = Contract - Contract order type, for contract offerers that can dynamically generate orders. Introduced in Seaport v1.4 and currently unsupported
//
// swagger:model core__blockchain__evm__abi__models__seaport__OrderType
type CoreBlockchainEvmAbiModelsSeaportOrderType int64

// for schema
var coreBlockchainEvmAbiModelsSeaportOrderTypeEnum []interface{}

func init() {
	var res []CoreBlockchainEvmAbiModelsSeaportOrderType
	if err := json.Unmarshal([]byte(`[0,1,2,3,4]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		coreBlockchainEvmAbiModelsSeaportOrderTypeEnum = append(coreBlockchainEvmAbiModelsSeaportOrderTypeEnum, v)
	}
}

func (m CoreBlockchainEvmAbiModelsSeaportOrderType) validateCoreBlockchainEvmAbiModelsSeaportOrderTypeEnum(path, location string, value CoreBlockchainEvmAbiModelsSeaportOrderType) error {
	if err := validate.EnumCase(path, location, value, coreBlockchainEvmAbiModelsSeaportOrderTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this core blockchain evm abi models seaport order type
func (m CoreBlockchainEvmAbiModelsSeaportOrderType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateCoreBlockchainEvmAbiModelsSeaportOrderTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this core blockchain evm abi models seaport order type based on context it is used
func (m CoreBlockchainEvmAbiModelsSeaportOrderType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
