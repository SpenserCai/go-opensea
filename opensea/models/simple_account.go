// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SimpleAccount simple account
//
// swagger:model SimpleAccount
type SimpleAccount struct {

	// The unique blockchain identifier, address, of the account.
	// Required: true
	// Read Only: true
	Address string `json:"address"`

	// config
	// Required: true
	// Read Only: true
	Config struct {
		ConfigEnum
	} `json:"config"`

	// A placeholder image. For the actual profile image, call the Get Account endpoint.
	// Required: true
	// Read Only: true
	ProfileImgURL string `json:"profile_img_url"`

	// user
	// Required: true
	// Read Only: true
	User *int64 `json:"user"`
}

// Validate validates this simple account
func (m *SimpleAccount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProfileImgURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SimpleAccount) validateAddress(formats strfmt.Registry) error {

	if err := validate.RequiredString("address", "body", m.Address); err != nil {
		return err
	}

	return nil
}

func (m *SimpleAccount) validateConfig(formats strfmt.Registry) error {

	return nil
}

func (m *SimpleAccount) validateProfileImgURL(formats strfmt.Registry) error {

	if err := validate.RequiredString("profile_img_url", "body", m.ProfileImgURL); err != nil {
		return err
	}

	return nil
}

func (m *SimpleAccount) validateUser(formats strfmt.Registry) error {

	if err := validate.Required("user", "body", m.User); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this simple account based on the context it is used
func (m *SimpleAccount) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProfileImgURL(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SimpleAccount) contextValidateAddress(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "address", "body", string(m.Address)); err != nil {
		return err
	}

	return nil
}

func (m *SimpleAccount) contextValidateConfig(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *SimpleAccount) contextValidateProfileImgURL(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "profile_img_url", "body", string(m.ProfileImgURL)); err != nil {
		return err
	}

	return nil
}

func (m *SimpleAccount) contextValidateUser(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "user", "body", m.User); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SimpleAccount) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SimpleAccount) UnmarshalBinary(b []byte) error {
	var res SimpleAccount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
