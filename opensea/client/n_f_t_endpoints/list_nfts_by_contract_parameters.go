// Code generated by go-swagger; DO NOT EDIT.

package n_f_t_endpoints

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListNftsByContractParams creates a new ListNftsByContractParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListNftsByContractParams() *ListNftsByContractParams {
	return &ListNftsByContractParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListNftsByContractParamsWithTimeout creates a new ListNftsByContractParams object
// with the ability to set a timeout on a request.
func NewListNftsByContractParamsWithTimeout(timeout time.Duration) *ListNftsByContractParams {
	return &ListNftsByContractParams{
		timeout: timeout,
	}
}

// NewListNftsByContractParamsWithContext creates a new ListNftsByContractParams object
// with the ability to set a context for a request.
func NewListNftsByContractParamsWithContext(ctx context.Context) *ListNftsByContractParams {
	return &ListNftsByContractParams{
		Context: ctx,
	}
}

// NewListNftsByContractParamsWithHTTPClient creates a new ListNftsByContractParams object
// with the ability to set a custom HTTPClient for a request.
func NewListNftsByContractParamsWithHTTPClient(client *http.Client) *ListNftsByContractParams {
	return &ListNftsByContractParams{
		HTTPClient: client,
	}
}

/*
ListNftsByContractParams contains all the parameters to send to the API endpoint

	for the list nfts by contract operation.

	Typically these are written to a http.Request.
*/
type ListNftsByContractParams struct {

	/* Address.

	   The unique public blockchain identifier for the contract or wallet.
	*/
	Address string

	/* Chain.

	   The blockchain on which to filter the results.
	*/
	Chain string

	/* Limit.

	   The number of NFTs to return. Must be between 1 and 50. Default: 50
	*/
	Limit *int64

	/* Next.

	   The cursor for the next page of results. This is returned from a previous request.
	*/
	Next *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list nfts by contract params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListNftsByContractParams) WithDefaults() *ListNftsByContractParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list nfts by contract params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListNftsByContractParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the list nfts by contract params
func (o *ListNftsByContractParams) WithTimeout(timeout time.Duration) *ListNftsByContractParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list nfts by contract params
func (o *ListNftsByContractParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list nfts by contract params
func (o *ListNftsByContractParams) WithContext(ctx context.Context) *ListNftsByContractParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list nfts by contract params
func (o *ListNftsByContractParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list nfts by contract params
func (o *ListNftsByContractParams) WithHTTPClient(client *http.Client) *ListNftsByContractParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list nfts by contract params
func (o *ListNftsByContractParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAddress adds the address to the list nfts by contract params
func (o *ListNftsByContractParams) WithAddress(address string) *ListNftsByContractParams {
	o.SetAddress(address)
	return o
}

// SetAddress adds the address to the list nfts by contract params
func (o *ListNftsByContractParams) SetAddress(address string) {
	o.Address = address
}

// WithChain adds the chain to the list nfts by contract params
func (o *ListNftsByContractParams) WithChain(chain string) *ListNftsByContractParams {
	o.SetChain(chain)
	return o
}

// SetChain adds the chain to the list nfts by contract params
func (o *ListNftsByContractParams) SetChain(chain string) {
	o.Chain = chain
}

// WithLimit adds the limit to the list nfts by contract params
func (o *ListNftsByContractParams) WithLimit(limit *int64) *ListNftsByContractParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the list nfts by contract params
func (o *ListNftsByContractParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithNext adds the next to the list nfts by contract params
func (o *ListNftsByContractParams) WithNext(next *string) *ListNftsByContractParams {
	o.SetNext(next)
	return o
}

// SetNext adds the next to the list nfts by contract params
func (o *ListNftsByContractParams) SetNext(next *string) {
	o.Next = next
}

// WriteToRequest writes these params to a swagger request
func (o *ListNftsByContractParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param address
	if err := r.SetPathParam("address", o.Address); err != nil {
		return err
	}

	// path param chain
	if err := r.SetPathParam("chain", o.Chain); err != nil {
		return err
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Next != nil {

		// query param next
		var qrNext string

		if o.Next != nil {
			qrNext = *o.Next
		}
		qNext := qrNext
		if qNext != "" {

			if err := r.SetQueryParam("next", qNext); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
