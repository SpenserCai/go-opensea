// Code generated by go-swagger; DO NOT EDIT.

package transaction_endpoints

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new transaction endpoints API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for transaction endpoints API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	BuildOfferV2(params *BuildOfferV2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*BuildOfferV2OK, error)

	GenerateListingFulfillmentDataV2(params *GenerateListingFulfillmentDataV2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GenerateListingFulfillmentDataV2OK, error)

	GenerateOfferFulfillmentDataV2(params *GenerateOfferFulfillmentDataV2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GenerateOfferFulfillmentDataV2OK, error)

	GetAllListingsOnCollectionV2(params *GetAllListingsOnCollectionV2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllListingsOnCollectionV2OK, error)

	GetAllOffersOnCollectionV2(params *GetAllOffersOnCollectionV2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllOffersOnCollectionV2OK, error)

	GetCollectionOffersV2(params *GetCollectionOffersV2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCollectionOffersV2OK, error)

	GetListings(params *GetListingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetListingsOK, error)

	GetOffers(params *GetOffersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOffersOK, error)

	GetOrder(params *GetOrderParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrderOK, error)

	GetTraitOffersV2(params *GetTraitOffersV2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTraitOffersV2OK, error)

	PostCriteriaOfferV2(params *PostCriteriaOfferV2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostCriteriaOfferV2OK, error)

	PostListing(params *PostListingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostListingOK, error)

	PostOffer(params *PostOfferParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostOfferOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
BuildOfferV2 builds an offer

Build a portion of a criteria offer including the merkle tree needed to post an offer.
*/
func (a *Client) BuildOfferV2(params *BuildOfferV2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*BuildOfferV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBuildOfferV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "build_offer_v2",
		Method:             "POST",
		PathPattern:        "/api/v2/offers/build",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BuildOfferV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BuildOfferV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for build_offer_v2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GenerateListingFulfillmentDataV2 fulfills a listing

Retrieve all the information, including signatures, needed to fulfill a listing directly onchain.
*/
func (a *Client) GenerateListingFulfillmentDataV2(params *GenerateListingFulfillmentDataV2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GenerateListingFulfillmentDataV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGenerateListingFulfillmentDataV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "generate_listing_fulfillment_data_v2",
		Method:             "POST",
		PathPattern:        "/api/v2/listings/fulfillment_data",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GenerateListingFulfillmentDataV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GenerateListingFulfillmentDataV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for generate_listing_fulfillment_data_v2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GenerateOfferFulfillmentDataV2 fullfills an offer

Retrieve all the information, including signatures, needed to fulfill an offer directly onchain.
*/
func (a *Client) GenerateOfferFulfillmentDataV2(params *GenerateOfferFulfillmentDataV2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GenerateOfferFulfillmentDataV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGenerateOfferFulfillmentDataV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "generate_offer_fulfillment_data_v2",
		Method:             "POST",
		PathPattern:        "/api/v2/offers/fulfillment_data",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GenerateOfferFulfillmentDataV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GenerateOfferFulfillmentDataV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for generate_offer_fulfillment_data_v2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllListingsOnCollectionV2 gets all listings by collection

Get all active, valid listings for a single collection.
*/
func (a *Client) GetAllListingsOnCollectionV2(params *GetAllListingsOnCollectionV2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllListingsOnCollectionV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllListingsOnCollectionV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_all_listings_on_collection_v2",
		Method:             "GET",
		PathPattern:        "/api/v2/listings/collection/{collection_slug}/all",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllListingsOnCollectionV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllListingsOnCollectionV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_all_listings_on_collection_v2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllOffersOnCollectionV2 gets all offers by collection

Get all active, valid offers for the specified collection. This includes individual and criteria offers.
*/
func (a *Client) GetAllOffersOnCollectionV2(params *GetAllOffersOnCollectionV2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllOffersOnCollectionV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllOffersOnCollectionV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_all_offers_on_collection_v2",
		Method:             "GET",
		PathPattern:        "/api/v2/offers/collection/{collection_slug}/all",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllOffersOnCollectionV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllOffersOnCollectionV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_all_offers_on_collection_v2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetCollectionOffersV2 gets collection offers

Get the active, valid collection offers for the specified collection.
*/
func (a *Client) GetCollectionOffersV2(params *GetCollectionOffersV2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCollectionOffersV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCollectionOffersV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_collection_offers_v2",
		Method:             "GET",
		PathPattern:        "/api/v2/offers/collection/{collection_slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCollectionOffersV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCollectionOffersV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_collection_offers_v2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetListings gets listings

Get the complete set of active, valid listings.
*/
func (a *Client) GetListings(params *GetListingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetListingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetListingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_listings",
		Method:             "GET",
		PathPattern:        "/api/v2/orders/{chain}/{protocol}/listings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetListingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetListingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_listings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetOffers gets individual offers

Get the active, valid individual offers. This does not include criteria offers.
*/
func (a *Client) GetOffers(params *GetOffersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOffersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOffersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_offers",
		Method:             "GET",
		PathPattern:        "/api/v2/orders/{chain}/{protocol}/offers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOffersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOffersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_offers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetOrder gets order

Get a single order, offer or listing, by its order hash. Protocol and Chain are required to prevent hash collisions.
*/
func (a *Client) GetOrder(params *GetOrderParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrderParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_order",
		Method:             "GET",
		PathPattern:        "/api/v2/orders/chain/{chain}/protocol/{protocol_address}/{order_hash}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrderReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_order: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTraitOffersV2 gets trait offers

Get the active, valid trait offers for the specified collection.
*/
func (a *Client) GetTraitOffersV2(params *GetTraitOffersV2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTraitOffersV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTraitOffersV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_trait_offers_v2",
		Method:             "GET",
		PathPattern:        "/api/v2/offers/collection/{collection_slug}/traits",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTraitOffersV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTraitOffersV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_trait_offers_v2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostCriteriaOfferV2 creates criteria offer

Create a criteria offer to purchase any NFT in a collection or which matches the specified trait.
*/
func (a *Client) PostCriteriaOfferV2(params *PostCriteriaOfferV2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostCriteriaOfferV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCriteriaOfferV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "post_criteria_offer_v2",
		Method:             "POST",
		PathPattern:        "/api/v2/offers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostCriteriaOfferV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostCriteriaOfferV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for post_criteria_offer_v2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostListing creates listing

List a single NFT (ERC721 or ERC1155) for sale on the OpenSea marketplace.
*/
func (a *Client) PostListing(params *PostListingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostListingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostListingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "post_listing",
		Method:             "POST",
		PathPattern:        "/api/v2/orders/{chain}/{protocol}/listings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostListingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostListingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for post_listing: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostOffer creates individual offer

Create an offer to purchase a single NFT (ERC721 or ERC1155).
*/
func (a *Client) PostOffer(params *PostOfferParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostOfferOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostOfferParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "post_offer",
		Method:             "POST",
		PathPattern:        "/api/v2/orders/{chain}/{protocol}/offers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostOfferReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostOfferOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for post_offer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
