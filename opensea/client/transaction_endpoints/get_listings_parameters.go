// Code generated by go-swagger; DO NOT EDIT.

package transaction_endpoints

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetListingsParams creates a new GetListingsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetListingsParams() *GetListingsParams {
	return &GetListingsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetListingsParamsWithTimeout creates a new GetListingsParams object
// with the ability to set a timeout on a request.
func NewGetListingsParamsWithTimeout(timeout time.Duration) *GetListingsParams {
	return &GetListingsParams{
		timeout: timeout,
	}
}

// NewGetListingsParamsWithContext creates a new GetListingsParams object
// with the ability to set a context for a request.
func NewGetListingsParamsWithContext(ctx context.Context) *GetListingsParams {
	return &GetListingsParams{
		Context: ctx,
	}
}

// NewGetListingsParamsWithHTTPClient creates a new GetListingsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetListingsParamsWithHTTPClient(client *http.Client) *GetListingsParams {
	return &GetListingsParams{
		HTTPClient: client,
	}
}

/*
GetListingsParams contains all the parameters to send to the API endpoint

	for the get listings operation.

	Typically these are written to a http.Request.
*/
type GetListingsParams struct {

	/* AssetContractAddress.

	    Filter results by the contract address for NFT(s).
	NOTE: If used, token_ids or token_id is required.
	*/
	AssetContractAddress *string

	/* Bundled.

	   Restricts results to only include orders that are bundles of NFTs. Default: false
	*/
	Bundled *bool

	/* Chain.

	   The blockchain on which to filter the results.
	*/
	Chain string

	/* Cursor.

	   The cursor for the next page of results. This is returned from a previous request.
	*/
	Cursor *string

	/* Limit.

	   The number of orders to return. Must be between 1 and 50. Default: 20
	*/
	Limit *int64

	/* ListedAfter.

	   Filter to only include orders that were listed after the given timestamp. This is a Unix epoch timestamp in seconds.

	   Format: date-time
	*/
	ListedAfter *strfmt.DateTime

	/* ListedBefore.

	   Filter to only include orders that were listed before the given timestamp. This is a Unix epoch timestamp in seconds.

	   Format: date-time
	*/
	ListedBefore *strfmt.DateTime

	/* Maker.

	   Filter results by the order maker's wallet address.
	*/
	Maker *string

	/* OrderBy.

	    The order in which to sort the results. Default: created_date
	NOTE: If `eth_price` is used, `asset_contract_address` and `token_id` are required.
	*/
	OrderBy *string

	/* OrderDirection.

	   The direction in which to sort the results. Default: desc
	*/
	OrderDirection *string

	/* PaymentTokenAddress.

	   Payment Token Address to filter results. This ensures all returned orders are listed in a single currency.
	*/
	PaymentTokenAddress *string

	/* Protocol.

	   The token settlement protocol to use in the request.
	*/
	Protocol string

	/* Taker.

	   Filter results by the order taker's wallet address.
	*/
	Taker *string

	/* TokenIds.

	    An array of token IDs to search for (e.g. ?token_ids=1&token_ids=209). This endpoint will return a list of orders with token_id matching any of the IDs in this array.
	NOTE: If used, asset_contract_address is required.
	*/
	TokenIds *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get listings params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetListingsParams) WithDefaults() *GetListingsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get listings params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetListingsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get listings params
func (o *GetListingsParams) WithTimeout(timeout time.Duration) *GetListingsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get listings params
func (o *GetListingsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get listings params
func (o *GetListingsParams) WithContext(ctx context.Context) *GetListingsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get listings params
func (o *GetListingsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get listings params
func (o *GetListingsParams) WithHTTPClient(client *http.Client) *GetListingsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get listings params
func (o *GetListingsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAssetContractAddress adds the assetContractAddress to the get listings params
func (o *GetListingsParams) WithAssetContractAddress(assetContractAddress *string) *GetListingsParams {
	o.SetAssetContractAddress(assetContractAddress)
	return o
}

// SetAssetContractAddress adds the assetContractAddress to the get listings params
func (o *GetListingsParams) SetAssetContractAddress(assetContractAddress *string) {
	o.AssetContractAddress = assetContractAddress
}

// WithBundled adds the bundled to the get listings params
func (o *GetListingsParams) WithBundled(bundled *bool) *GetListingsParams {
	o.SetBundled(bundled)
	return o
}

// SetBundled adds the bundled to the get listings params
func (o *GetListingsParams) SetBundled(bundled *bool) {
	o.Bundled = bundled
}

// WithChain adds the chain to the get listings params
func (o *GetListingsParams) WithChain(chain string) *GetListingsParams {
	o.SetChain(chain)
	return o
}

// SetChain adds the chain to the get listings params
func (o *GetListingsParams) SetChain(chain string) {
	o.Chain = chain
}

// WithCursor adds the cursor to the get listings params
func (o *GetListingsParams) WithCursor(cursor *string) *GetListingsParams {
	o.SetCursor(cursor)
	return o
}

// SetCursor adds the cursor to the get listings params
func (o *GetListingsParams) SetCursor(cursor *string) {
	o.Cursor = cursor
}

// WithLimit adds the limit to the get listings params
func (o *GetListingsParams) WithLimit(limit *int64) *GetListingsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get listings params
func (o *GetListingsParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithListedAfter adds the listedAfter to the get listings params
func (o *GetListingsParams) WithListedAfter(listedAfter *strfmt.DateTime) *GetListingsParams {
	o.SetListedAfter(listedAfter)
	return o
}

// SetListedAfter adds the listedAfter to the get listings params
func (o *GetListingsParams) SetListedAfter(listedAfter *strfmt.DateTime) {
	o.ListedAfter = listedAfter
}

// WithListedBefore adds the listedBefore to the get listings params
func (o *GetListingsParams) WithListedBefore(listedBefore *strfmt.DateTime) *GetListingsParams {
	o.SetListedBefore(listedBefore)
	return o
}

// SetListedBefore adds the listedBefore to the get listings params
func (o *GetListingsParams) SetListedBefore(listedBefore *strfmt.DateTime) {
	o.ListedBefore = listedBefore
}

// WithMaker adds the maker to the get listings params
func (o *GetListingsParams) WithMaker(maker *string) *GetListingsParams {
	o.SetMaker(maker)
	return o
}

// SetMaker adds the maker to the get listings params
func (o *GetListingsParams) SetMaker(maker *string) {
	o.Maker = maker
}

// WithOrderBy adds the orderBy to the get listings params
func (o *GetListingsParams) WithOrderBy(orderBy *string) *GetListingsParams {
	o.SetOrderBy(orderBy)
	return o
}

// SetOrderBy adds the orderBy to the get listings params
func (o *GetListingsParams) SetOrderBy(orderBy *string) {
	o.OrderBy = orderBy
}

// WithOrderDirection adds the orderDirection to the get listings params
func (o *GetListingsParams) WithOrderDirection(orderDirection *string) *GetListingsParams {
	o.SetOrderDirection(orderDirection)
	return o
}

// SetOrderDirection adds the orderDirection to the get listings params
func (o *GetListingsParams) SetOrderDirection(orderDirection *string) {
	o.OrderDirection = orderDirection
}

// WithPaymentTokenAddress adds the paymentTokenAddress to the get listings params
func (o *GetListingsParams) WithPaymentTokenAddress(paymentTokenAddress *string) *GetListingsParams {
	o.SetPaymentTokenAddress(paymentTokenAddress)
	return o
}

// SetPaymentTokenAddress adds the paymentTokenAddress to the get listings params
func (o *GetListingsParams) SetPaymentTokenAddress(paymentTokenAddress *string) {
	o.PaymentTokenAddress = paymentTokenAddress
}

// WithProtocol adds the protocol to the get listings params
func (o *GetListingsParams) WithProtocol(protocol string) *GetListingsParams {
	o.SetProtocol(protocol)
	return o
}

// SetProtocol adds the protocol to the get listings params
func (o *GetListingsParams) SetProtocol(protocol string) {
	o.Protocol = protocol
}

// WithTaker adds the taker to the get listings params
func (o *GetListingsParams) WithTaker(taker *string) *GetListingsParams {
	o.SetTaker(taker)
	return o
}

// SetTaker adds the taker to the get listings params
func (o *GetListingsParams) SetTaker(taker *string) {
	o.Taker = taker
}

// WithTokenIds adds the tokenIds to the get listings params
func (o *GetListingsParams) WithTokenIds(tokenIds *int64) *GetListingsParams {
	o.SetTokenIds(tokenIds)
	return o
}

// SetTokenIds adds the tokenIds to the get listings params
func (o *GetListingsParams) SetTokenIds(tokenIds *int64) {
	o.TokenIds = tokenIds
}

// WriteToRequest writes these params to a swagger request
func (o *GetListingsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AssetContractAddress != nil {

		// query param asset_contract_address
		var qrAssetContractAddress string

		if o.AssetContractAddress != nil {
			qrAssetContractAddress = *o.AssetContractAddress
		}
		qAssetContractAddress := qrAssetContractAddress
		if qAssetContractAddress != "" {

			if err := r.SetQueryParam("asset_contract_address", qAssetContractAddress); err != nil {
				return err
			}
		}
	}

	if o.Bundled != nil {

		// query param bundled
		var qrBundled bool

		if o.Bundled != nil {
			qrBundled = *o.Bundled
		}
		qBundled := swag.FormatBool(qrBundled)
		if qBundled != "" {

			if err := r.SetQueryParam("bundled", qBundled); err != nil {
				return err
			}
		}
	}

	// path param chain
	if err := r.SetPathParam("chain", o.Chain); err != nil {
		return err
	}

	if o.Cursor != nil {

		// query param cursor
		var qrCursor string

		if o.Cursor != nil {
			qrCursor = *o.Cursor
		}
		qCursor := qrCursor
		if qCursor != "" {

			if err := r.SetQueryParam("cursor", qCursor); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.ListedAfter != nil {

		// query param listed_after
		var qrListedAfter strfmt.DateTime

		if o.ListedAfter != nil {
			qrListedAfter = *o.ListedAfter
		}
		qListedAfter := qrListedAfter.String()
		if qListedAfter != "" {

			if err := r.SetQueryParam("listed_after", qListedAfter); err != nil {
				return err
			}
		}
	}

	if o.ListedBefore != nil {

		// query param listed_before
		var qrListedBefore strfmt.DateTime

		if o.ListedBefore != nil {
			qrListedBefore = *o.ListedBefore
		}
		qListedBefore := qrListedBefore.String()
		if qListedBefore != "" {

			if err := r.SetQueryParam("listed_before", qListedBefore); err != nil {
				return err
			}
		}
	}

	if o.Maker != nil {

		// query param maker
		var qrMaker string

		if o.Maker != nil {
			qrMaker = *o.Maker
		}
		qMaker := qrMaker
		if qMaker != "" {

			if err := r.SetQueryParam("maker", qMaker); err != nil {
				return err
			}
		}
	}

	if o.OrderBy != nil {

		// query param order_by
		var qrOrderBy string

		if o.OrderBy != nil {
			qrOrderBy = *o.OrderBy
		}
		qOrderBy := qrOrderBy
		if qOrderBy != "" {

			if err := r.SetQueryParam("order_by", qOrderBy); err != nil {
				return err
			}
		}
	}

	if o.OrderDirection != nil {

		// query param order_direction
		var qrOrderDirection string

		if o.OrderDirection != nil {
			qrOrderDirection = *o.OrderDirection
		}
		qOrderDirection := qrOrderDirection
		if qOrderDirection != "" {

			if err := r.SetQueryParam("order_direction", qOrderDirection); err != nil {
				return err
			}
		}
	}

	if o.PaymentTokenAddress != nil {

		// query param payment_token_address
		var qrPaymentTokenAddress string

		if o.PaymentTokenAddress != nil {
			qrPaymentTokenAddress = *o.PaymentTokenAddress
		}
		qPaymentTokenAddress := qrPaymentTokenAddress
		if qPaymentTokenAddress != "" {

			if err := r.SetQueryParam("payment_token_address", qPaymentTokenAddress); err != nil {
				return err
			}
		}
	}

	// path param protocol
	if err := r.SetPathParam("protocol", o.Protocol); err != nil {
		return err
	}

	if o.Taker != nil {

		// query param taker
		var qrTaker string

		if o.Taker != nil {
			qrTaker = *o.Taker
		}
		qTaker := qrTaker
		if qTaker != "" {

			if err := r.SetQueryParam("taker", qTaker); err != nil {
				return err
			}
		}
	}

	if o.TokenIds != nil {

		// query param token_ids
		var qrTokenIds int64

		if o.TokenIds != nil {
			qrTokenIds = *o.TokenIds
		}
		qTokenIds := swag.FormatInt64(qrTokenIds)
		if qTokenIds != "" {

			if err := r.SetQueryParam("token_ids", qTokenIds); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
