// Code generated by go-swagger; DO NOT EDIT.

package analytics_endpoints

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new analytics endpoints API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for analytics endpoints API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetCollectionStats(params *GetCollectionStatsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCollectionStatsOK, error)

	ListEventsByAccount(params *ListEventsByAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListEventsByAccountOK, error)

	ListEventsByCollection(params *ListEventsByCollectionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListEventsByCollectionOK, error)

	ListEventsByNft(params *ListEventsByNftParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListEventsByNftOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetCollectionStats gets collection stats

Get stats for a single collection.
*/
func (a *Client) GetCollectionStats(params *GetCollectionStatsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCollectionStatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCollectionStatsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_collection_stats",
		Method:             "GET",
		PathPattern:        "/api/v2/collections/{collection_slug}/stats",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCollectionStatsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCollectionStatsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_collection_stats: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListEventsByAccount gets events by account

Get a list of events for an account. The list will be paginated and include up to 100 events per page.
*/
func (a *Client) ListEventsByAccount(params *ListEventsByAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListEventsByAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListEventsByAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_events_by_account",
		Method:             "GET",
		PathPattern:        "/api/v2/events/accounts/{address}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListEventsByAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListEventsByAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_events_by_account: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListEventsByCollection gets events by collection

Get a list of events for a collection. The list will be paginated and include up to 100 events per page.
*/
func (a *Client) ListEventsByCollection(params *ListEventsByCollectionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListEventsByCollectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListEventsByCollectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_events_by_collection",
		Method:             "GET",
		PathPattern:        "/api/v2/events/collection/{collection_slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListEventsByCollectionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListEventsByCollectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_events_by_collection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListEventsByNft gets events by n f t

Get a list of events for a single NFT. The list will be paginated and include up to 100 events per page.
*/
func (a *Client) ListEventsByNft(params *ListEventsByNftParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListEventsByNftOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListEventsByNftParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_events_by_nft",
		Method:             "GET",
		PathPattern:        "/api/v2/events/chain/{chain}/contract/{address}/nfts/{identifier}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListEventsByNftReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListEventsByNftOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list_events_by_nft: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
